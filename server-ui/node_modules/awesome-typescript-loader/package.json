{
  "name": "awesome-typescript-loader",
  "version": "1.1.1",
  "description": "Awesome TS loader for webpack",
  "main": "dist.babel/entry.js",
  "scripts": {
    "prepublish": "npm run test && grunt",
    "pretest": "npm run build",
    "test": "mocha dist.babel/test",
    "watch": "npm run watch:ts && npm run watch:babel",
    "watch:ts": "npm run build:ts -- --watch --diagnostics",
    "watch:babel": "npm run build:babel -- --watch",
    "prebuild": "npm run lint",
    "build": "npm run build:ts && npm run build:babel",
    "build:ts": "tsc -p src --pretty",
    "build:babel": "babel dist -d dist.babel",
    "lint": "tslint src/*.ts"
  },
  "author": {
    "name": "Stanislav Panferov",
    "email": "fnight.m@gmail.com",
    "url": "http://panferov.me/"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/s-panferov/awesome-typescript-loader.git"
  },
  "license": "MIT",
  "keywords": [
    "webpack",
    "loader",
    "webpack-loader",
    "typescript"
  ],
  "bugs": {
    "url": "https://github.com/s-panferov/awesome-typescript-loader/issues"
  },
  "homepage": "https://github.com/s-panferov/awesome-typescript-loader",
  "dependencies": {
    "babel-polyfill": "^6.1.19",
    "colors": "^1.1.2",
    "enhanced-resolve": "^0.9.1",
    "es6-promisify": "^4.1.0",
    "loader-utils": "^0.2.6",
    "lodash": "^4.13.1",
    "object-assign": "^4.1.0",
    "parse-json": "^2.2.0",
    "source-map-support": "^0.4.0",
    "strip-bom": "^1.0.0",
    "strip-json-comments": "^2.0.0",
    "tsconfig": "^3.0.0"
  },
  "devDependencies": {
    "babel-cli": "^6.3.17",
    "babel-core": "^6.7.4",
    "babel-preset-es2015": "^6.1.2",
    "babel-preset-es2015-node4": "^2.1.0",
    "babel-preset-stage-2": "^6.1.2",
    "bluebird": "^3.3.3",
    "chai": "^3.5.0",
    "git-hooks": "^1.0.2",
    "grunt": "^1.0.1",
    "grunt-bump": "^0.3.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-conventional-changelog": "^6.1.0",
    "grunt-shell": "^1.1.2",
    "load-grunt-tasks": "^3.5.0",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.4",
    "ps-node": "^0.1.1",
    "rimraf": "^2.5.0",
    "sinon": "^1.17.4",
    "temp": "^0.8.3",
    "tslint": "3.11.0-dev.0",
    "typescript": "1.9.0-dev.20160610-1.0",
    "webpack": "2.1.0-beta.4"
  },
  "readme": "# The best TypeScript loader for Webpack\n\n[![Join the chat at https://gitter.im/s-panferov/awesome-typescript-loader](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/s-panferov/awesome-typescript-loader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/s-panferov/awesome-typescript-loader.svg?branch=master)](https://travis-ci.org/s-panferov/awesome-typescript-loader)\n\nTypeScript loader for Webpack. This project was started as a fork of https://github.com/andreypopp/typescript-loader.\nThanks to @andreypopp for the great project.\n\nThe main goal of this loader is to support the **watch** mode and *webpack-dev-server* with **incremental** compilation.\nThere are a lot of problems in other TypeScript loaders that are fixed here.\n\n## Installation\n\n```\nnpm install awesome-typescript-loader --save-dev\n```\n\n## Differences between [`ts-loader`](https://github.com/TypeStrong/ts-loader)\n\n`awesome-typescript-loader` loader was created mostly to speed-up compilation in my own projects.\nSome of them are quite big and I wanted to have full control on how my files are compiled. There are three major points:\n\n1) awesome-typescript-loader (atl) uses dependency resolution to build modules dependency graph at early stages.\nThis speeds up build process in some corner cases (minimizes module resolutions, minimizes `createProgram` calls),\nbut adds a lot of additional complexity. Also it can re-emit all related files which is also useful in some corner cases.\n\n2) atl has first-class integration with Babel and enables caching possibilities. This can be useful for those who use Typescript with Babel.\nWhen `useBabel` and `useCache` flags are enabled, typescript's emit will be transpiled with Babel and cached.\nSo next time if source file (+environment) has the same checksum we can totally skip typescript's and babel's transpiling.\nThis significantly reduces build time in this scenario.\n\n3) atl is able to fork type-checker to a separate process, which also speeds-up some development scenarios (e.g. react with react-hot-loader)\nSo your webpack compilation will end earlier and you can explore compiled version in your browser while your files are typecheked.\n\n## Configuration\n\n1. Add `.ts` as a resolvable extension.\n2. Configure all files with a `.ts` extension to be handled by `awesome-typescript-loader`.\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n\n  // Currently we need to add '.ts' to the resolve.extensions array.\n  resolve: {\n    extensions: ['', '.ts', '.webpack.js', '.web.js', '.js']\n  },\n\n  // Source maps support ('inline-source-map' also works)\n  devtool: 'source-map',\n\n  // Add the loader for .ts files.\n  module: {\n    loaders: [\n      {\n        test: /\\.ts$/,\n        loader: 'awesome-typescript-loader'\n      }\n    ]\n  }\n};\n```\n\nAfter that, you will be able to build TypeScript files with webpack.\n\n## TS defaults\n\n* target = 'es5'\n\n## tsconfig.json\n\nYou can use the tsconfig.json file to configure your compiler and loader:\n\n```\n{\n    \"compilerOptions\": {\n        \"noImplicitAny\": true,\n        \"removeComments\": true,\n    },\n    \"awesomeTypescriptLoaderOptions\": {\n        /* ... */\n    }\n}\n```\n\n## Loader options\n\n### compiler *(string) (default='typescript')*\n\nAllows use of TypeScript compilers other than the official one. Must be\nset to the NPM name of the compiler, e.g. *ntypescript* or the path to a package folder.\nNote that the compiler must be installed in **your** project. You can also use\nnightly versions.\n\n### emitRequireType *(boolean) (default=false)*\n\nSpecify whether or not the loader emits webpacks's require type.\n\n### library *(string) (default='es5' possible='es6')*\n\nAllows the use of libraries other than the `target`'s default one. Useful when you want to use ES6 library with ES5 target. Additionally you might use `library=es6` with Node.\n\n### instanceName *(string) (default='default')*\n\nAllows the use of several TypeScript compilers with different settings in one app. Override `instanceName` to initialize another instance.\n\n### reEmitDependentFiles *(boolean) (default=false')*\n\nCollect file dependency graph and re-emit all dependent files along with the changed file.\n\n### tsconfig *(string) (default='tsconfig.json')*\n\nSpecifies the path to a TS config file. This is useful when you have multiple config files. This setting is useless *inside* a TS config file.\n\n### useWebpackText *(boolean) (default=false)*\n\nUse this setting to force the loader to use webpack's method of loading files. Useful only with ts-jsx-loader. Builds may become slower.\n\n### externals *(array)*\n\nArray of paths to .d.ts files that must be included in program. Useful with `rewriteImports`.\n\n### doTypeCheck *(boolean) (default=true)*\n\nUse this setting to disable type checking.\n\n### ignoreDiagnostics *(number[]) (default=[])*\n\nYou can squelch certain TypeScript errors by specifying an array of [diagnostic codes](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/diagnosticMessages.json) to ignore.\nFor example, you can transpile [stage 1 properties](https://github.com/jeffmo/es-class-fields-and-static-properties) from `*.js` using `\"ignoreDiagnostics\": [8014]`.\n\n### forkChecker *(boolean) (default=false)*\n\nDo type checking in a separate process, so webpack doesn't need to wait. **Significantly** improves development workflow with tools like [react-hot-loader](https://github.com/gaearon/react-hot-loader).\n\nWorks only with `ForkCheckerPlugin`:\n\n```js\nvar ForkCheckerPlugin = require('awesome-typescript-loader').ForkCheckerPlugin;\n\nplugins: [\n    new ForkCheckerPlugin(),\n]\n```\n\n### forkCheckerSilent *(boolean) (default=false)*\n\nLess logging from the checker.\n\n### useBabel *(boolean) (default=false)*\n\nInvoke Babel to transpile files. Useful with ES6 target. Please see `useCache` option\nwhich can improve warm-up time.\n\n### babelOptions *(object) (default=null)*\n\nUse this option to pass some options to Babel (e.g. presets). Please note that\n[`.babelrc` file](https://babeljs.io/docs/usage/babelrc/) is more universal way to do this.\n\n### useCache *(boolean) (default=false)*\n\nUse internal file cache. This is useful with Babel, when processing takes a long time to complete. Improves warm-up time.\n\n### usePrecompiledFiles *(boolean) (default=false)*\n\nUse pre-compiled files if any. Files must be named as `{filename}.js` and `{filename}.map`.\n\n### cacheDirectory *(string) (default='.awcache')*\n\nDirectory when cache is stored.\n\n### resolveGlobs *(string) (default=true)*\n\nInvoke glob resolver using 'filesGlob' and 'exclude' sections of `tsconfig`.\n\n### skipDeclarationFilesCheck *(string) (default=false)*\n\nSkip declaration files typechecking. Use this only if you understand consequences.\n\n## Compiler options\n\nYou can pass compiler options inside loader query string or in tsconfig file.\n\n## Using with --watch or webpack-dev-server\n\nThis loader supports both `--watch` and `webpack-dev-server` modes. It handles file dependencies\nusing internal webpack dependency markers. When you change a file, the loader recompiles all the dependencies.\n\n## External Modules\n\nThe most natural way to structure your code with TypeScript and webpack is to use [external modules](https://github.com/Microsoft/TypeScript/wiki/Modules#going-external), and these work as you would expect.\n\n```\nnpm install --save react\n```\n\n```typescript\nimport * as React from 'react';\n```\n\n## Internal Modules\n\nThis project doesn't aim to support internal modules, because it's hard to resolve dependencies for the watch mode. Of course, you can still use them without watch, but this function is **unstable**.\n\n## Declaration files\n\nAll declaration files should be resolvable from the entry file.\nThe easiest way to do this is to create a `references.d.ts` file which contains\nreferences to all of your declaration files. Then reference\n`references.d.ts` from your entry file.\n",
  "readmeFilename": "README.md",
  "_id": "awesome-typescript-loader@1.1.1",
  "_shasum": "ac9db6de67ed7228e2d6486cb7f9874aec2d012f",
  "_resolved": "https://dhtbms11.discovery.holdings.co.za/repository/npm/awesome-typescript-loader/-/awesome-typescript-loader-1.1.1.tgz",
  "_from": "awesome-typescript-loader@>=1.1.1 <2.0.0"
}
